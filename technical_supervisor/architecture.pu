@startuml
skinparam nodesep 10
skinparam ranksep 5

scale 1.0

node "Control center" as control_center {
    component "Supervisors" as gui <<guiComponent>>
}

node "Technical supervisor system" as ts {
    rectangle "Public APIs" {
        component "REST API" as rest_api
        component "Websockets/WebRTC API" as ws_api
        component "ORM" as orm
    }

    rectangle "Backend services" as backend {
        component "Auth module" as auth
        component "Assignment engine" as assignment_engine
        component "Notification engine" as notification_engine
        component "Logging engine" as log_engine
        component "ADS client" as ads_client
        component "Map data sync" as map_sync
        component "Sensors sync" as sensors_sync
    }


    database "Database" as db {
        component "Geozones"
        component "Landmakrs"
        component "Danger zones"
        component "ODD"
        component "Users"
        component "User roles"
        component "User permissions"
        component "User absences"
        component "Notifications"
        component "ADS"
        component "ADS sensors"
        component "ADS cases"
        component "ADS case events"
        component "ADS trips"
        component "ADS trips events"
        component "ADS stats"
        component "ADS tests"
    }

    database "Map data" as map_db {
        component "Imagery"
        component "Roads and projections"
    }
}


node "ADS1" as ads_node {

    node "ROS ecosystem" as ros_system {
        component "Orchestrator" as ads_orchestrator_node
        component "Manager" as ads_manager_node
    }

    node {
        component "SafetyDriver" as safety_driver_gui1 <<guiComponent>>
    }

    node {

        component "Passenger" as passenger_gui1 << guiComponent >>
    }

    database "Raw sensor logs (blackbox)" as raw_logs_ads1
    database "Node logs (main board)" as logs_ads1
    database "Map data" as map_db_ads


    note bottom of ads_orchestrator_node
        Reacts to errors from other nodes
    end note

    note top of ads_manager_node
        Includes master start, shutdown, and restart
    end note
}


node "Historic logs" as logs_system {
    database "ADS" as ads_logs_db {
        component "ADS Logs"
        component "Sensor Logs"
    }

    database "Technical Supervisor" as ts_logs_db {
        component "User actions"
    }
}

raw_logs_ads1 <-d- ros_system
logs_ads1 <-d- ros_system
ros_system -u--> ads_logs_db
' ads2 -down-> raw_logs_ads2
' ads2 -down-> logs_ads2
gui -down-> rest_api
gui <-down-> ws_api
rest_api --> auth
rest_api --> log_engine
rest_api -u-> orm
ws_api -u-> orm
orm -u-> db
ws_api -d-> assignment_engine
notification_engine -r-> ws_api
ws_api <-d-> ads_client
rest_api <-d-> ads_client
gui -u-> map_db

rest_api <-> sensors_sync
sensors_sync <--> ads_client
assignment_engine <--> ads_client

ads_orchestrator_node <-d-> ads_client : "Get errors and state of ADS"
ads_manager_node <-d-> ads_client : "Only for restart"

safety_driver_gui1 -u-> ads_manager_node

passenger_gui1 -d-> ads_orchestrator_node
passenger_gui1 -d-> map_db_ads

log_engine -u-> ts_logs_db

map_sync ---> map_db_ads
map_sync -u-> map_db

<style>
.guiComponent {
    BackgroundColor LightSkyBlue
    FontColor Black
    ComponentBorderColor LightSlateGray
    RoundCorner 10
}
</style>
@enduml
