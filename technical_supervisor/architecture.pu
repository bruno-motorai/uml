@startuml
skinparam nodesep 10
skinparam ranksep 5

scale 1.0

node "Clients" as client_side {
    component "GUI" as gui
    component "GUI2" as gui2
}

node "Technical supervisor system" as ts {
    rectangle "Public APIs" {
            component "REST API" as rest_api
            component "Websockets/WebRTC API" as ws_api
            component "ORM" as orm
        }

    rectangle "Backend services" as backend {
        component "Auth module" as auth
        component "Assignment engine" as assignment_engine
        component "Notification engine" as notification_engine
        component "Logging engine" as log_engine
    }

    component "ADS client" as ads_client

    database "Database" as db {
        component "Geozones"
        component "Landmakrs"
        component "Users"
        component "User roles"
        component "User permissions"
        component "User logs"
        component "User absences"
        component "Notifications"
        component "ADS"
        component "ADS sensors"
        component "ADS cases"
        component "ADS case events"
        component "ADS trips"
        component "ADS stats"
        component "ADS tests"
    }
}


node "ADS1" as ads_node { 
    node "ADS" as ads1 {
        component "BackendNode" as ads_backend
    }
    database "Raw sensor logs (blackbox)" as raw_logs_ads1
    database "Node logs (main board)" as logs_ads1
}

node "ADS2" as ads_node2 { 
    node "ADS" as ads2 {
        component "BackendNode" as ads_backend2
    }
    database "Raw sensor logs (blackbox)" as raw_logs_ads2
    database "Node logs (main board)" as logs_ads2
}

ads1 -down-> raw_logs_ads1
ads1 -down-> logs_ads1
ads2 -down-> raw_logs_ads2
ads2 -down-> logs_ads2
ads_backend <-d-> ads_client
ads_backend2 <-u-> ads_client
client_side -down-> rest_api
client_side <-down-> ws_api
rest_api --> auth
rest_api --> log_engine
rest_api -u-> orm
ws_api -u-> orm
orm -d-> db
ws_api -d-> assignment_engine
notification_engine -r-> ws_api
ws_api <-d-> ads_client
rest_api <-d-> ads_client
@enduml