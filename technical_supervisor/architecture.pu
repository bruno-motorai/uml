@startuml
skinparam nodesep 10
skinparam ranksep 5

scale 1.0

node "Control center" as control_center {
    component "Supervisors" as gui <<guiComponent>>
}

node "Technical supervisor system" as ts {
    rectangle "Public APIs" {
        component "REST API" as rest_api
        component "Websockets/WebRTC API" as ws_api
        component "ORM" as orm
    }

    rectangle "Backend services" as backend {
        component "Auth module" as auth
        component "Assignment engine" as assignment_engine
        component "Notification engine" as notification_engine
        component "Logging engine" as log_engine
        component "ADS client" as ads_client
        component "Map data sync" as map_sync
        component "Sensors sync" as sensors_sync
    }


    database "Database" as db {
        component "Geozones"
        component "Landmakrs"
        component "Danger zones"
        component "ODD"
        component "Users"
        component "User roles"
        component "User permissions"
        component "User absences"
        component "Notifications"
        component "ADS"
        component "ADS sensors"
        component "ADS cases"
        component "ADS case events"
        component "ADS trips"
        component "ADS trips events"
        component "ADS stats"
        component "ADS tests"
    }

    database "Map data" as map_db {
        component "Imagery"
        component "Roads and projections"
    }
}

node {
    component "MQTT Broker" as mqtt_broker
}

node "ADS1" as ads_node {

    node sensor_rack {
    }

    node "ROS ecosystem" as ros_system {
        component "Orchestrator" as ads_orchestrator_node
        component "Manager" as ads_manager_node
        component "MQTT bridge" as ads_mqtt_bridge_node
        component "Position handler" as ads_position_node
        component "Command handler" as ads_command_node
        component "Sensor stream" as ads_sensor_stream_node
    }

    node {
        component "SafetyDriver" as safety_driver_gui <<guiComponent>>
    }

    node {
        component "Passenger" as passenger_gui << guiComponent >>
    }

    database "Raw sensor logs (blackbox)" as raw_logs_ads1
    database "Node logs (main board)" as logs_ads1
    database "Map data" as map_db_ads


    note bottom of ads_orchestrator_node
        Reacts to errors from other nodes
    end note

    note top of ads_manager_node
        Includes master start, shutdown, and restart
    end note

    note left of ads_command_node
        Includes services for the ADS:
        - Restart
        - Get version
        - Sync sensors
        - Set to workshop
        - Deactivate
        - Activate
        - Send command
        - Input route suggestions
        - Enable sensor stream
        - Get state (with metadata)
        - Get autonomous tests outcome
        - Get last synchronized tests outcome
    end note
}


node "Historic logs" as logs_system {
    database "ADS" as ads_logs_db {
        component "ADS Logs"
        component "Sensor Logs"
    }

    database "Technical Supervisor" as ts_logs_db {
        component "User actions"
    }
}

raw_logs_ads1 <-d- ros_system
logs_ads1 <-d- ros_system
ros_system -u--> ads_logs_db
gui -down-> rest_api
gui <-down-> ws_api
rest_api --> auth
rest_api --> log_engine
rest_api -u-> orm
ws_api -u-> orm
orm -u-> db
ws_api -d-> assignment_engine
notification_engine -r-> ws_api
ws_api <-d-> ads_client
rest_api <-d-> ads_client
gui -u-> map_db

rest_api <-> sensors_sync
sensors_sync <--> ads_client
assignment_engine <--> ads_client

ads_orchestrator_node <-d-> ads_mqtt_bridge_node : "Live ADS logs"
ads_manager_node <-d-> ads_command_node : "Restart ADS"
ads_sensor_stream_node <-d-> ads_command_node : "Sensor stream"
ads_mqtt_bridge_node <-d-> mqtt_broker
mqtt_broker <-d-> ads_client
ads_mqtt_bridge_node <-u--> ads_position_node : "Live ADS and trip"
ads_mqtt_bridge_node <-u--> ads_command_node
ads_mqtt_bridge_node  <-u--> sensor_rack : "Live sensor logs"

safety_driver_gui -u-> ads_manager_node
safety_driver_gui -u-> ads_orchestrator_node

' passenger_gui -d-> ads_orchestrator_node
passenger_gui -d-> map_db_ads

log_engine -u-> ts_logs_db

map_sync ---> map_db_ads
map_sync -u-> map_db

<style>
.guiComponent {
    BackgroundColor LightSkyBlue
    FontColor Black
    ComponentBorderColor LightSlateGray
    RoundCorner 10
}
</style>
@enduml
